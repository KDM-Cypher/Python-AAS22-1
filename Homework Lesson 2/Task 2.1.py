# 1. Список
a = ['Lada',
     ['Granta', 'Vesta', 'Largus'],
     'Audi',
     ['A8', 'Q8', 'e-tron'],
     'Toyota',
     ['Camry', 'Land Cruiser', 'Hilux']
     ]

# Поиск в списке марки автомобиля по её модели:
def model_search(stamp):
    i = 0
    while i < len(a):
        if i % 2 != 0:
            for x in a[i]:
                if x == stamp:
                    return (a[i-1])
        i += 1

print(model_search('Hilux'))

# Особенности списка:
#    - Может содержать разные типы данных
#    - Может иметь вложенности
#    - Элементы списка упорядочены
#    - К элементу можно обратиться по индексу
#    - Можно изменить значение элемента по индексу

# 2. Словарь
b = {'Lada': ['Granta', 'Vesta', 'Largus'],
     'Audi': ['A8', 'Q8', 'e-tron'],
     'Toyota': ['Camry', 'Land Cruiser', 'Hilux']
     }

# Поиск в словаре моделей автомобиля по марке:
def search_for_models(model):
    for i in b[model]:
         print(i)

search_for_models('Audi')

# Особенности словаря:
#    - Данные хранятся в формате ключ-значение
#    - Элемент должен иметь уникальный ключ
#    - Элементы словаря не упорядочены
#    - К значению элемента можно обратиться через его ключ

# 3. Множества
Lada = {'Granta', 'Vesta', 'Largus'}
Audi = {'A8', 'Q8', 'e-tron'}
Toyota = {'Camry', 'Land Cruiser', 'Hilux'}

# Проверка, относится ли модель к марке:
def is_relate(model, stamp):
    if model in stamp:
        return 'Относится'
    else:
        return 'Не относится'
print(is_relate('Granta', Lada))

# Особенности множества:
#    - Элементы множества не упорядочены
#    - Множество может включать элементы разных типов
#    - Множество может состоять только из уникальных элементов

# Вывод:
# Каждый тип коллекции удобен для решения определённых задач:

# Список удобен, когда требуется создать последовательность значений любого типа,
# получать доступ к любому элементу списка можно через его индекс.
# Также списки - это изменяемые объекты, можно изменять их элементы или порядок элементов.

# Словарь удобен, когда требуется последовательность уникальных элементов с вложенными значениями

# Множества удобны, когда требуется последовательность уникальных элементов
